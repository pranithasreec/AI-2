1.Water jug
from collections import deque
def Solution(a, b, target):
	m = {}
	isSolvable = False
	path = []

	q = deque()

	#Initializing with jugs being empty
	q.append((0, 0))

	while (len(q) > 0):

		# Current state
		u = q.popleft()
		if ((u[0], u[1]) in m):
			continue
		if ((u[0] > a or u[1] > b or
			u[0] < 0 or u[1] < 0)):
			continue
		path.append([u[0], u[1]])

		m[(u[0], u[1])] = 1

		if (u[0] == target or u[1] == target):
			isSolvable = True

			if (u[0] == target):
				if (u[1] != 0):
					path.append([u[0], 0])
			else:
				if (u[0] != 0):

					path.append([0, u[1]])

			sz = len(path)
			for i in range(sz):
				print("(", path[i][0], ",",
					path[i][1], ")")
			break

		q.append([u[0], b]) # Fill Jug2
		q.append([a, u[1]]) # Fill Jug1

		for ap in range(max(a, b) + 1):
			c = u[0] + ap
			d = u[1] - ap

			if (c == a or (d == 0 and d >= 0)):
				q.append([c, d])

			c = u[0] - ap
			d = u[1] + ap

			if ((c == 0 and c >= 0) or d == b):
				q.append([c, d])

		q.append([a, 0])

		q.append([0, b])

	if (not isSolvable):
		print("Solution not possible")

if __name__ == '__main__':

	Jug1, Jug2, target = 4, 3, 2
	print("Path from initial state "
		"to solution state ::")

	Solution(Jug1, Jug2, target)

2.Crypto Arithemetic problem.
print("cryptarthimetic")
def is_solution_valid(mapping, words, result):
    # Convert words and result to integers based on the mapping
    word_values = [int(''.join(str(mapping[c]) for c in word)) for word in words]
    result_value = int(''.join(str(mapping[c]) for c in result))

    return sum(word_values) == result_value

def solve_cryptarithmetic(words, result):
    all_letters = set(''.join(words + [result]))
    if len(all_letters) > 10:
        return None  # More than 10 unique letters; not solvable with single digits

    unique_letters = sorted(all_letters)
    permutations = range(10)  # All possible digit values

    from itertools import permutations as permute
    for perm in permute(permutations, len(unique_letters)):
        mapping = {letter: digit for letter, digit in zip(unique_letters, perm)}
        if mapping[result[0]] == 0:  # Leading zeros not allowed
            continue
        if is_solution_valid(mapping, words, result):
            return mapping

    return None  # No valid mapping found

# Example usage
print("SEND + MORE = MONEY")
words = ['send', 'more']
result = 'money'

solution = solve_cryptarithmetic(words, result)

if solution:
    print("Solution found:")
    for letter, digit in solution.items():
        print(f"{letter} = {digit}")
else:
    print("No solution found for the given cryptarithmeticÂ problem.")

3.fly or not.
Bird (eagle).
       Bird (sparrow).
       Bird (penguin).
       Fly (penguin) :- !, fail.
       Fly(X) :- bird(X).

4.family relation.
female(pam).
female(liz).
female(ann).
female(pat).
male(tom).
male(bob).
male(jim).
mother(X, Y) :- female(X), parent(X, Y).
father(X, Y) :- male(X), parent(X, Y).
parent(pam, bob).
parent(tom, bob).
parent(pam, liz).
parent(tom, liz).
parent(bob, ann).
parent(pat, jim).
grandfather(X, Z) :- father(X, Y), parent(Y, Z).
grandmother(X, Z) :- mother(X, Y), parent(Y, Z).
sister(X, Y) :- female(X), X \= Y, parent(Z, X), parent(Z, Y).
brother(X, Y) :- male(X), X \= Y, parent(Z, X), parent(Z, Y).
