1.DFS
print("DFS")
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

def dfs(graph, start, visited):
    if start not in visited:
        print(start, end=' ')
        visited.add(start)
        for neighbor in graph[start]:
            dfs(graph, neighbor, visited)

def dfs_main(graph, start_node):
    visited = set()
    dfs(graph, start_node, visited)


dfs_main(graph, 'A')


2.min-max
import math

def minimax (curDepth, nodeIndex,
maxTurn, scores,
targetDepth):

  # base case : targetDepth reached
  if (curDepth == targetDepth):
      return scores[nodeIndex]

  if (maxTurn):
      return max(minimax(curDepth + 1, nodeIndex * 2,
      False, scores, targetDepth),
      minimax(curDepth + 1, nodeIndex * 2 + 1,
      False, scores, targetDepth))

  else:
      return min(minimax(curDepth + 1, nodeIndex * 2,
      True, scores, targetDepth),
      minimax(curDepth + 1, nodeIndex * 2 + 1,
      True, scores, targetDepth))

  # Driver code
scores = [3, 5, 2, 9, 12, 5, 23, 23]
treeDepth = math.log(len(scores), 2)
print("The optimal value is : ", end = "")
print(minimax(0, 0, True, scores, treeDepth))

3.Pattern matching
first_name(tonyblair, tony).
first_name(georgebush, georgedubya).
second_name(tonyblair, blair).
second_name(georgebush, bush).
find_first_name(FullName, FirstName) :-
    first_name(FullName, FirstName).
find_second_name(FullName,SecondName):-
    second_name(FullName,SecondName).

4.family relation
female(sarah), female(rebekah), female(hagar_concubine).
female(milcah), female(bashemath), female(mahalath).
female(first_daughter), female(rachel), female(labans_wife).
male(terah), male(abraham), male(nahor).
male(haran), male(isaac), male(ismael).
male(uz), male(kemuel).
mother(X, Y) :- female(X), parent(X, Y).
father(X, Y) :- male(X), parent(X, Y).
grandfather(X, Z) :- father(X, Y), parent(Y, Z).
grandmother(X, Z) :- mother(X, Y), parent(Y, Z).
sister(X, Y) :- female(X), X \= Y, parent(Z, X), parent(Z, Y).
brother(X, Y) :- male(X), X \= Y, parent(Z, X), parent(Z, Y).
