1.8 puzzle
import heapq
GOAL_STATE = ((1, 2, 3), (8, 0, 4), (7, 6, 5))
MOVES = [(0, -1), (0, 1), (-1, 0), (1, 0)]
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3
def heuristic(state):
    h = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                continue
            x, y = divmod(state[i][j] - 1, 3)
            h += abs(i - x) + abs(j - y)
    return h
def solve_8_puzzle(initial_state):
    visited = set()
    start_node = (heuristic(initial_state), 0, initial_state)
    priority_queue = [start_node]
    while priority_queue:
        _, cost, current_state = heapq.heappop(priority_queue)
        if current_state == GOAL_STATE:
            return cost
        if current_state in visited:
            continue
        visited.add(current_state)
        x, y = find_blank(current_state)
        for dx, dy in MOVES:
            new_x, new_y = x + dx, y + dy
            if is_valid(new_x, new_y):
                new_state = [list(row) for row in current_state]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                new_cost = cost + 1 + heuristic(new_state)
                heapq.heappush(priority_queue, (new_cost, cost + 1, tuple(map(tuple, new_state)))
    return -1 
if __name__ == "__main__":
    initial_state = ((2, 8, 3), (1, 6, 4), (7, 0, 5))
    steps = solve_8_puzzle(initial_state)
    if steps != -1:
        print(f"Solution found in {steps} steps.")
    else:
        print("No solution found.")

2.
