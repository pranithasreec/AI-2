1.8 puzzle
import heapq
GOAL_STATE = ((1, 2, 3), (8, 0, 4), (7, 6, 5))
MOVES = [(0, -1), (0, 1), (-1, 0), (1, 0)]
def find_blank(state):
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                return i, j
def is_valid(x, y):
    return 0 <= x < 3 and 0 <= y < 3
def heuristic(state):
    h = 0
    for i in range(3):
        for j in range(3):
            if state[i][j] == 0:
                continue
            x, y = divmod(state[i][j] - 1, 3)
            h += abs(i - x) + abs(j - y)
    return h
def solve_8_puzzle(initial_state):
    visited = set()
    start_node = (heuristic(initial_state), 0, initial_state)
    priority_queue = [start_node]
    while priority_queue:
        _, cost, current_state = heapq.heappop(priority_queue)
        if current_state == GOAL_STATE:
            return cost
        if current_state in visited:
            continue
        visited.add(current_state)
        x, y = find_blank(current_state)
        for dx, dy in MOVES:
            new_x, new_y = x + dx, y + dy
            if is_valid(new_x, new_y):
                new_state = [list(row) for row in current_state]
                new_state[x][y], new_state[new_x][new_y] = new_state[new_x][new_y], new_state[x][y]
                new_cost = cost + 1 + heuristic(new_state)
                heapq.heappush(priority_queue, (new_cost, cost + 1, tuple(map(tuple, new_state)))
    return -1 
if __name__ == "__main__":
    initial_state = ((2, 8, 3), (1, 6, 4), (7, 0, 5))
    steps = solve_8_puzzle(initial_state)
    if steps != -1:
        print(f"Solution found in {steps} steps.")
    else:
        print("No solution found.")

2.8 queen
N = 8
board = [[0]*N for _ in range(N)]

def attack(i, j):
    for k in range(0,N):
        if board[i][k]==1 or board[k][j]==1:
            return True
    for k in range(0,N):
        for l in range(0,N):
            if (k+l==i+j) or (k-l==i-j):
                if board[k][l]==1:
                    return True
    return False

def N_queens(n):
    if n==0:
        return True
    for i in range(0,N):
        for j in range(0,N):
            if (not(attack(i,j))) and (board[i][j]!=1):
                board[i][j] = 1
                if N_queens(n-1)==True:
                    return True
                board[i][j] = 0

    return False

N_queens(N)
for i in board:
    print (i)

3.student,teacher,sub code
Studies (charlie, csc135). 
Studies (olivia, csc135). 
Studies (jack, csc131). 
Studies (arthur, csc134).
Teaches (kirke, csc135). 
Teaches (collins, csc131). 
Teaches (collins, csc171). 
Teaches (juniper, csc134). 
Professor (X, Y) :- teaches(X, C),
Studies (Y, C).

4.Tower of hanoi
move_disk(1, Source, Target, _, [move(Source, Target)]).
move_disk(N, Source, Target, Auxiliary, Moves) :-
    N > 1,
    M is N - 1,
    move_disk(M, Source, Auxiliary, Target, FirstMoves),
    move_disk(1, Source, Target, _, LastMove),
    move_disk(M, Auxiliary, Target, Source, RestMoves),
    append(FirstMoves, [LastMove|RestMoves], Moves).
hanoi(N, Moves) :-
    move_disk(N, 'A', 'C', 'B', Moves).
