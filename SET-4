1.vaccum cleaner
class VacuumCleaner:
    def __init__(self):
        self.position = 0  # Position of the vacuum cleaner (0: Left, 1: Right)
        self.environment = [0, 0]  # Environment with dirty cells (0: Clean, 1: Dirty)

    def sense(self):
        return self.environment[self.position]

    def move(self):
        if self.position == 0:
            self.position = 1
        else:
            self.position = 0

    def clean(self):
        self.environment[self.position] = 0

    def run(self, steps):
        for _ in range(steps):
            current_state = self.sense()
            if current_state == 1:  # Dirty cell
                self.clean()
                print(f"Cleaned cell {self.position}")
            else:
                print(f"Cell {self.position} is already clean.")
            self.move()


if __name__ == "__main__":
    vacuum_cleaner = VacuumCleaner()
    steps = 5
    print("Initial environment:", vacuum_cleaner.environment)
    vacuum_cleaner.run(steps)
    print("Final environment:", vacuum_cleaner.environment)

2.BFS
print("DFS")
graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

def dfs(graph, start, visited):
    if start not in visited:
        print(start, end=' ')
        visited.add(start)
        for neighbor in graph[start]:
            dfs(graph, neighbor, visited)

def dfs_main(graph, start_node):
    visited = set()
    dfs(graph, start_node, visited)


dfs_main(graph, 'A')

3.Name,DOB
born(jan, 20,3,1977).
born(jeroen, 2,2,1992).
born(joris, 17,3,1995).
born(jelle, 1,1,2004).
born(jesus, 24,12,2000).
born(joop, 30,4,1989).
born(jannecke, 17,3,1993).
born(jaap, 16,11,1995).

4.FName, SName, Sex, Age and Occupation
person(frances,wilson,female,28,architect).
person(fred,jones,male,62,doctor).
person(paul,smith,male,45,plumber).
person(martin,williams,male,23,chemist).
person(mary,jones,female,24,programmer).
person(martin,johnson,male,47,solicitor).
man(A):-person(A,B,male,C,D).

